{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAE3C,IAAII,EAAQ,EACRC,EAAO,EACPC,EAAS,EA+Bb,SAASC,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,aAAY,KACYC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,EAAUQ,MAAAP,IAEpBG,EAAO,C,SAAEJ,EAAUQ,MAAAP,GAAQ,GAE5BA,EAAM,G,CAtCbX,EAAKmB,iBAAiB,SAGtB,WAIE,OAHAb,EAAQH,EAAWiB,cACnBb,EAAOH,EAAUgB,cACjBZ,EAASH,EAAYe,cACd,C,MAAEd,E,KAAOC,E,OAAMC,E,IANxBR,EAAKmB,iBAAiB,UAStB,SAAmCE,GACjCA,EAAMC,iBACN,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAQe,GAAK,EAC/BC,QAAQC,IAAInB,GACZG,EAAc,EAAIc,EAAGjB,GAClBoB,MAAK,EAAChB,SAAEA,EAAUQ,MAAAS,MACjBC,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqBpB,QAAiBiB,MAAU,IAGnDI,OAAM,EAACrB,SAAEA,EAAUQ,MAAAc,MAClBJ,EAAA9B,GAAS+B,OAAOI,QACd,sBAAoBvB,QAAesB,MAAU,IAGnD1B,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\n\nlet delay = 0;\nlet step = 0;\nlet amount = 0;\n\nform.addEventListener('input', onFormInput);\nform.addEventListener('submit', onFormSubmitCreatePromise);\n\nfunction onFormInput() {\n  delay = inputDelay.valueAsNumber;\n  step = inputStep.valueAsNumber;\n  amount = inputAmount.valueAsNumber;\n  return { delay, step, amount };\n}\n\nfunction onFormSubmitCreatePromise(event) {\n  event.preventDefault();\n  for (let i = 0; i < amount; i += 1) {\n    console.log(delay);\n    createPromise(1 + i, delay) //delay + i * step\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setInterval(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","Promise","resolve","reject","setInterval","Math","random","delay","addEventListener","valueAsNumber","event","preventDefault","i","console","log","then","delay1","$parcel$interopDefault","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.f1b96bb1.js.map"}